{"version":3,"file":"static/js/17.96059acd.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/Api.js","services/getImage.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledCastList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin: 20px;\n`;\n\nexport const StyledCastItem = styled.li`\n  padding: 5px;\n  border-radius: 4px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  &:hover,\n  &:focus {\n    transform: scale(1.03);\n    cursor: zoom-in;\n  }\n`;\n\nexport const Image = styled.img`\n  width: 100%;\n  height: auto;\n  object-fit: cover;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\n\nexport const CastName = styled.h3`\n  margin-top: 5px;\n  margin-bottom: 5px;\n`;","import { useEffect, useState } from 'react';\nimport { ThreeDots } from 'react-loader-spinner';\nimport { useParams } from 'react-router-dom';\nimport { getCastDetails } from 'services/Api';\nimport { getPoster } from 'services/getImage';\nimport { CastName, Image, StyledCastItem, StyledCastList } from './Cast.styled';\n\nconst Cast = () => {\n  const [movieCast, setMovieCast] = useState({});\n  const [loading, setLoading] = useState(false);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) return;\n    const fetchMovieCast = async id => {\n      try {\n        setLoading(true);\n        const movieCastData = await getCastDetails(id);\n        setMovieCast(movieCastData);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMovieCast(movieId);\n  }, [movieId]);\n  return (\n    <>\n      {loading && (\n        <ThreeDots\n          height=\"80\"\n          width=\"80\"\n          radius=\"9\"\n          color=\"#3f51b5\"\n          ariaLabel=\"three-dots-loading\"\n          wrapperStyle={{}}\n          wrapperClassName=\"\"\n          visible={true}\n        />\n      )}\n      {movieCast?.length < 1 && <p>No info about castomers</p>}\n      {movieCast?.length > 0 && (\n        <StyledCastList>\n          {movieCast?.map(casts => {\n            return (\n              <StyledCastItem key={casts.cast_id}>\n                <Image src={getPoster(casts.profile_path)} alt={casts.name} />\n                <CastName>{casts.name}</CastName>\n                <p>{casts.character}</p>\n              </StyledCastItem>\n            );\n          })}\n        </StyledCastList>\n      )}\n    </>\n  );\n};\nexport default Cast;","import axios from 'axios';\nconst URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '6da8758eb40e221013709d63079fd9c4';\n\nconst getTrandingMovies = async () => {\n  const response = await axios.get(`${URL}trending/all/day?api_key=${API_KEY}`);\n  console.log(response.data.results);\n  return response.data.results;\n};\n\nconst getMovies = async query => {\n  const response = await axios.get(\n    `${URL}search/movie?api_key=${API_KEY}&query=${query}`\n  );\n\n  return response.data.results;\n};\n\nconst getMovieDetails = async movieId => {\n  const response = await axios.get(`${URL}movie/${movieId}?api_key=${API_KEY}`);\n\n  return response.data;\n};\n\nconst getCastDetails = async movieId => {\n  const response = await axios.get(\n    `${URL}movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n\n  return response.data.cast;\n};\n\nconst getReview = async movieId => {\n  const response = await axios.get(\n    `${URL}movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n\n  console.log('review', response.data.results);\n  return response.data.results;\n};\n\nexport {\n  getTrandingMovies,\n  getMovies,\n  getMovieDetails,\n  getCastDetails,\n  getReview,\n};","import noPoster from '../images/No_image_poster.png';\nexport function getPoster(poster) {\n  if (poster) {\n    return `https://image.tmdb.org/t/p/w300${poster}`;\n  } else {\n    return noPoster;\n  }\n}"],"names":["StyledCastList","styled","_templateObject","_taggedTemplateLiteral","StyledCastItem","_templateObject2","Image","_templateObject3","CastName","_templateObject4","_useState","useState","_useState2","_slicedToArray","movieCast","setMovieCast","_useState3","_useState4","loading","setLoading","movieId","useParams","useEffect","fetchMovieCast","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","id","movieCastData","_context","prev","next","getCastDetails","sent","t0","console","log","finish","stop","_x","apply","arguments","_jsxs","_Fragment","children","_jsx","ThreeDots","height","width","radius","color","ariaLabel","wrapperStyle","wrapperClassName","visible","length","map","casts","src","getPoster","profile_path","alt","name","character","cast_id","URL","API_KEY","getTrandingMovies","response","axios","concat","data","results","abrupt","getMovies","_ref2","_callee2","query","_context2","getMovieDetails","_ref3","_callee3","_context3","_x2","_ref4","_callee4","_context4","cast","_x3","getReview","_ref5","_callee5","_context5","_x4","poster","noPoster"],"sourceRoot":""}